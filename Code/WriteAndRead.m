%Auto-generated by Data Acquisition Toolbox Analog Output Generator on 22-Jul-2020 11:29:20
%Create DataAcquisition Object
%Create a DataAcquisition object for the specified vendor.
d = daq("ni");


%Add Channels
%Add channels and set channel properties, if any.
addoutput(d,"Dev1","ao0","Voltage");

%Add Channels
%Add channels and set channel properties, if any.
addinput(d,"Dev1","ai0","Voltage");


%Set DataAcquisition Rate
%Set scan rate.
d.Rate = 10000;

%Define Output Signal

%Apply the specified scale and offset on the selected variable to define the output signal. Also, repeat the output signal to ensure that there is at least 0.5 seconds of data.
%outputSignal = [];
%outputSignal(:,1) = DAQ_3.Dev1_ai0 * 1 + 0;
%numCycles = ceil((d.Rate/2)/length(outputSignal));
%outputSignal = repmat(outputSignal, numCycles, 1);

amplitudePeakToPeak_ch1 = 2;

sineFrequency = 50; % 100 Hz
duration = 0.5;

outputSignal = [];
outputSignal(:,1) = createSine(amplitudePeakToPeak_ch1/2, sineFrequency, d.Rate, "bipolar", duration);


%Generate Signal Data
%Write the signal data.
preload(d,outputSignal);
start(d,"repeatoutput");
pause(1); % Adjust the duration of signal generation.

%Read Data
%Read the data in timetable format.
DAQ_4 = read(d,seconds(10));

stop(d);

%Clean Up
%Clear all DataAcquisition and channel objects.
clear d outputSignal;

sample = DAQ_4.Variables;plot(abs(fft(sample)));
thd(DAQ_4.Variables,10^4,60);

%Plot Data
%Plot the read data on labeled axes.
%plot(DAQ_4.Time, DAQ_4.Variables)
%xlabel("Time")
%ylabel("Amplitude (V)")
%legend(DAQ_4.Properties.VariableNames)







function sine = createSine(A, f, sampleRate, type, duration)

numSamplesPerCycle = floor(sampleRate/f);
T = 1/f;
timestep = T/numSamplesPerCycle;
t = (0 : timestep : T-timestep)';

if type == "bipolar"
    y = A*sin(2*pi*f*t);
elseif type == "unipolar"
    y = A*sin(2*pi*f*t) + A;
end

numCycles = round(f*duration);
sine = repmat(y,numCycles,1);
end
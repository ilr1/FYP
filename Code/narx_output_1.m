function [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 27-Aug-2020 23:47:59.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 2xTS cell, 2 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
%   Each X{2,ts} = 1xQ matrix, input #2 at timestep ts.
%
%   Xi = 2x2 cell 2, initial 2 input delay states.
%   Each Xi{1,ts} = 1xQ matrix, initial states for input #1.
%   Each Xi{2,ts} = 1xQ matrix, initial states for input #2.
%
%   Ai = 2x0 cell 2, initial 2 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 2 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 2x2 cell 2, final 2 input delay states.
%   Each Xf{1,ts} = 1xQ matrix, final states for input #1.
%   Each Xf{2,ts} = 1xQ matrix, final states for input #2.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = -0.33175982237436;
x1_step1.gain = 3.03312438479803;
x1_step1.ymin = -1;

% Input 2
x2_step1.xoffset = -0.048187255859375;
x2_step1.gain = 22.5054945054945;
x2_step1.ymin = -1;

% Layer 1
b1 = [2.3757578810865798147;2.08578968649366292;-1.8122234806235031357;-0.81317105455789651103;-0.11280874975620673595;0.20293118284680014551;-0.41099985346245559992;2.1244474659457046606;1.5569409327344223559;-2.4690893568176663919];
IW1_1 = [-1.0322320201900621051 2.1078820853266706514;-0.15707960732665363079 1.7625343804627746636;0.017283387004640427681 -1.2185178135749752393;1.4759130341956914201 0.45416954326090114291;1.1084922214561758746 -1.1885303115483289993;1.0652684801653342639 -1.114352070366129821;-1.4408716724070078641 -0.21398100960350383004;0.39105031607248025294 -0.51662199181660972691;1.2176393213930203352 -1.3805298835741901531;-0.87569654367370375336 -0.84648274629847997108];
IW1_2 = [-0.80017493468751244023 0.51061648500026290964;0.78793410669786612122 1.4156350073211065865;1.6998583302654219906 -1.4302566493715735962;-1.1986026916095560146 0.17628554325765954935;0.1861560921482728892 -0.80527744456168615095;1.524017626507638612 -1.3706892436435884619;1.7313621724444150374 -0.51261478157232209796;1.1780146165612872533 1.2593519950890588177;-0.36892396159838181102 -1.3008430780325035414;-1.8470717419374200752 -1.0670779466493101051];

% Layer 2
b2 = -0.86543124348637412435;
LW2_1 = [0.94648587303554643224 -0.052435601299389747454 0.37014625192612032878 -0.01257167432438644622 -1.2016173572166670702 1.2793084222391313265 0.009182470593068819617 0.053223876337462533437 -0.17736112561014025224 -0.052930716755992320011];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 22.5054945054945;
y1_step1.xoffset = -0.048187255859375;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,3);
for ts=1:2
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Input 2 Delay States
Xd2 = cell(1,3);
for ts=1:2
    Xd2{ts} = mapminmax_apply(Xi{2,ts},x2_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Input 2
    Xd2{xdts} = mapminmax_apply(X{2,ts},x2_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2]-1,3)+1});
    tapdelay2 = cat(1,Xd2{mod(xdts-[1 2]-1,3)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1 + IW1_2*tapdelay2);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end

close all; clc;



%Read in 10 seconds of music
Fs = 44100;
samples = [1,10*Fs];
filePath = "Ludwig_van_Beethoven_-_Concerto_for_Piano_and_Orchestra_no._4_in_G_major_-_3._Rondo_(Wilhelm_Kempff,_Ferdinand_Leitner,_Berliner_Philharmoniker,_1962).flac";
[signal, Fs] = audioread(filePath, samples);
%signal = phi;
data = [];

%Auto-generated by Data Acquisition Toolbox Analog Output Generator on 22-Jul-2020 11:29:20
%Create DataAcquisition Object
%Create a DataAcquisition object for the specified vendor.
d = daq("ni");


%Add Channels
%Add channels and set channel properties, if any.
addoutput(d,"Dev1","ao0","Voltage");

%Add Channels
%Add channels and set channel properties, if any.
chanInput = addinput(d,"Dev1","ai0","Voltage");
chanInput.Range = [-10,10];

%Set DataAcquisition Rate
%Set scan rate.
d.Rate = Fs;

%Apply the specified scale and offset on the selected variable to define the output signal. Also, repeat the output signal to ensure that there is at least 0.5 seconds of data.
%outputSignal = [];
%outputSignal(:,1) = DAQ_3.Dev1_ai0 * 1 + 0;
%numCycles = ceil((d.Rate/2)/length(outputSignal));
%outputSignal = repmat(outputSignal, numCycles, 1);

amplitudePeakToPeak_ch1 = 2;

outputSignal = [];
outputSignal = signal(:,1);


%Generate Signal Data
%Write the signal data.
preload(d,outputSignal);
start(d,"repeatoutput");
pause(1); % Adjust the duration of signal generation.

%Read Data
%Read the data in timetable format.
data = read(d,seconds(20)).Variables;

stop(d);

%Clean Up
%Clear all DataAcquisition and channel objects.
clear d;

%sample = DAQ_4.Variables;plot(abs(fft(sample)));
%hold on;
%thdA(i) = thd(DAQ_4.Variables,10^4,60,'power');


filename = 'beethovenData.mat';
%save(filename,'data','outputSignal')
